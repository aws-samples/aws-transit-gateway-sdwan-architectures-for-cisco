AWSTemplateFormatVersion: '2010-09-09'
Description: The template creates a TGW that terminate SDWAN tunnels from the branch and IPsec VPN tunnels into TGW.
Parameters:
  vEdge1SDWANIP:
    Description: Specify the Public SDWAN IP of vEdgeCloud1
    Type: String
  vEdge1BGPASN:
    Description: Specify the BGP ASN of vEdgeCloud1
    Type: String
    Default: 65000
  PreSharedKeyForvEdge1VPNAttachment:
    Description: Specify the PreSharedKey of vEdgeCloud1. Must be 15 characters in length and cannot start with zero (0).
    Type: String
    Default: vedge1234567891
    MinLength: 15
    MaxLength: 15
  PreSharedKeyForvEdge2VPNAttachment:
    Description: Specify the PreSharedKey of vEdgeCloud2. Must be 15 characters in length and cannot start with zero (0).
    Type: String
    Default: vedge1234567892
    MinLength: 15
    MaxLength: 15
  vEdge2SDWANIP:
    Description: Specify the Public SDWAN IP of vEdgeCloud2
    Type: String
  vEdge2BGPASN:
    Description: Specify the BGP ASN of vEdgeCloud2
    Type: String
    Default: 65000
  AmazonSideAsn:
    Description: A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
    Type: String
    Default: 64513
  vEdge1VPNTunnelCIDRs:
    Description: Specify the Tunnel InsideCIDRs for vEdgeCloud1. You can use the default pre-filled CIDRs as well.
    Type: CommaDelimitedList
    Default: "169.254.6.0/30, 169.254.7.0/30"
  vEdge2VPNTunnelCIDRs:
    Description: Specify the Tunnel InsideCIDRs for vEdgeCloud2. You can use the default pre-filled CIDRs as well.
    Type: CommaDelimitedList
    Default: "169.254.8.0/30, 169.254.9.0/30"
  HRVPCSubnetId:
    Description: Specify the SubnetId for HR VPC
    Type: String
  HRVPCId:
    Description: Specify the VPCID for HR VPC
    Type: String
  ENGVPCSubnetId:
    Description: Specify the SubnetId for ENG VPC
    Type: String
  ENGVPCId:
    Description: Specify the VPCID for ENG VPC
    Type: String
Resources:
  TransitGateway:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      AmazonSideAsn: !Ref AmazonSideAsn
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: "disable"
      DefaultRouteTablePropagation: "disable"
      Description: A transit gateway to support a centralized vEdge server
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-TGW
#------------------ Custom Resource to pull lambda into local S3 bucket ------------------------------------------------
  S3BucketforLambda:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub 'lambda-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
      Tags: 
       - Key: Name
         Value: !Sub ${AWS::StackName}-S3Bucket
  S3Copy:
    Type: Custom::CopyToS3
    Properties:
      ServiceToken: !GetAtt 'CopyFilesToS3.Arn'
      S3BucketName: !Ref S3BucketforLambda
      Urls: 
        - https://github.com/mufaddalq/sdwan-aws/blob/master/tgwDescribe.zip?raw=true
  CopyFilesToS3:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Handler: index.lambda_handler
      Timeout: 60
      Code:
        ZipFile:
          Fn::Join:
          - "\n"
          - - ''
            - import os
            - import urllib.request
            - from urllib.parse import urlparse
            - import json
            - import boto3
            - import cfnresponse
            - ''
            - s3 = boto3.resource('s3')
            - ''
            - print('Loading function')
            - ''
            - 'def save_to_local(url):'
            - "    urlPath = urlparse(url).path"
            - "    fileName = os.path.basename(urlPath)"
            - "    filePath = '/tmp/' + fileName"
            - "    urllib.request.urlretrieve(url, filePath)"
            - "    return filePath"
            - ''
            - ''
            - 'def upload_to_s3(filePath, bucket):'
            - "    fileName = os.path.basename(filePath)"
            - "    s3.Object(bucket, fileName).put(Body=open(filePath, 'rb'))"
            - ''
            - ''
            - 'def copy_to_s3(url, bucket):'
            - "    filePath = save_to_local(url)"
            - "    upload_to_s3(filePath, bucket)"
            - ''
            - ''
            - 'def lambda_handler(event, context):'
            - "    print('Received event: ' + json.dumps(event, indent=2))"
            - ''
            - "    if event['RequestType'] == 'Create':"
            - "        # get the properties set in the CloudFormation resource"
            - "        properties = event['ResourceProperties']"
            - "        urls = properties['Urls']"
            - "        bucket = properties['S3BucketName']"
            - ''
            - "        try:"
            - "            for url in urls:"
            - "                copy_to_s3(url, bucket)"
            - ''
            - "        except Exception as e:"
            - "            print(e)"
            - "            cfnresponse.send(event, context, cfnresponse.FAILED, {"
            - "                             'Response': 'Failure'})"
            - "            return"
            - ''
            - "    if event['RequestType'] == 'Delete':"
            - "        properties = event['ResourceProperties']"
            - "        bucket = properties['S3BucketName']"
            - "        bucket = s3.Bucket(bucket)"
            - "        try:"
            - "            for obj in bucket.objects.filter():"
            - "                s3.Object(bucket.name, obj.key).delete()"
            - ''
            - "        except Exception as e:"
            - "            print(e)"
            - "            cfnresponse.send(event, context, cfnresponse.FAILED, {"
            - "                             'Response': 'Failure'})"
            - "            return"
            - ''
            - "    cfnresponse.send(event, context, cfnresponse.SUCCESS,"
            - "                     {'Response': 'Success'})"
      Runtime: python3.6
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
          Condition: {}
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CopyFilesToS3LambdaRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
            - s3:ListAllMyBuckets
            Resource: arn:aws:s3:::*
  #------------------ Custom Resource to get the various TGW properties needed -------------------------------------------
  LambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
          Condition: {}
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-tgwDescribe
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeVpnConnections
                  - ec2:DescribeTransitGatewayRouteTables
                  - ec2:DescribeTransitGatewayAttachments
                Resource: "*"
  TransitGatewayProperties:
    Type: Custom::TransitGatewayProperty
    DependsOn:
      - vEdge1VPNAttachment
      - vEdge2VPNAttachment
    Properties:
      ServiceToken: !GetAtt 'TransitGatewayLambda.Arn'
      vpn1_id: !Ref vEdge1VPNAttachment
      vpn2_id: !Ref vEdge2VPNAttachment
      stackName: !Ref "AWS::StackName"
  TransitGatewayLambda:
    Type: AWS::Lambda::Function
    DependsOn: CopyFilesToS3
    Properties:
      Handler: tgwDescribe/lambda_function.lambda_handler
      Timeout: 60
      Role: !GetAtt 'LambdaBasicExecutionRole.Arn'
      Runtime: python3.6
      Code:
        S3Bucket: !Ref S3BucketforLambda
        S3Key: "tgwDescribe.zip"  
      MemorySize: 3000
  #------------------ TGW Route Tables -------------------------------------------
  TransitGatewayRouteTableEdge:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-edgertb
      TransitGatewayId: !Ref TransitGateway
  TransitGatewayRouteTableHRVPC:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-HRVPCrtb
      TransitGatewayId: !Ref TransitGateway
  TransitGatewayRouteTableENGVPC:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-ENGVPCrtb
      TransitGatewayId: !Ref TransitGateway
  #------------------ TGW VPN attachments -------------------------------------------
  vEdge1CustomerGateway: 
    Type: AWS::EC2::CustomerGateway
    Properties: 
      Type: ipsec.1
      BgpAsn: !Ref vEdge1BGPASN
      IpAddress: !Ref vEdge1SDWANIP
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-vEdge1Gateway"
  vEdge2CustomerGateway: 
    Type: AWS::EC2::CustomerGateway
    Properties: 
      Type: ipsec.1
      BgpAsn: !Ref vEdge2BGPASN
      IpAddress: !Ref vEdge2SDWANIP
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-vEdge2Gateway"
  vEdge1VPNAttachment:
    Type: AWS::EC2::VPNConnection
    Properties: 
      CustomerGatewayId: !Ref vEdge1CustomerGateway
      TransitGatewayId: !Ref TransitGateway
      Type: ipsec.1
      VpnTunnelOptionsSpecifications: 
        - PreSharedKey: !Ref PreSharedKeyForvEdge1VPNAttachment
          TunnelInsideCidr: !Select [0, !Ref vEdge1VPNTunnelCIDRs] 
        - PreSharedKey: !Ref PreSharedKeyForvEdge1VPNAttachment
          TunnelInsideCidr: !Select [1, !Ref vEdge1VPNTunnelCIDRs]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-vEdge1VPNAttachment"
  vEdge2VPNAttachment:
    Type: AWS::EC2::VPNConnection
    Properties: 
      CustomerGatewayId: !Ref vEdge2CustomerGateway
      TransitGatewayId: !Ref TransitGateway
      Type: ipsec.1
      VpnTunnelOptionsSpecifications: 
        - PreSharedKey: !Ref PreSharedKeyForvEdge2VPNAttachment
          TunnelInsideCidr: !Select [0, !Ref vEdge2VPNTunnelCIDRs]
        - PreSharedKey: !Ref PreSharedKeyForvEdge2VPNAttachment
          TunnelInsideCidr: !Select [1, !Ref vEdge2VPNTunnelCIDRs]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-vEdge2VPNAttachment"
  #------------------ TGW VPC attachments -------------------------------------------
  HRVPCAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds: 
        - !Ref HRVPCSubnetId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-HRVPCAttachment"
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref HRVPCId
  ENGVPCAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds: 
        - !Ref ENGVPCSubnetId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-ENGVPCAttachment"
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref ENGVPCId
  #------------------ TGW route table associations -------------------------------------------
  SDWANvEdge1TransitGatewayAssociation:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.vpn1_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.edge_tgw_rtb_id
  SDWANvEdge2TransitGatewayAssociation:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.vpn2_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.edge_tgw_rtb_id
  HRVPCTransitGatewayAssociation:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.HRVPC_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.HRVPC_tgw_rtb_id
  ENGVPCTransitGatewayAssociation:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.ENGVPC_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.ENGVPC_tgw_rtb_id
  #------------------ TGW route table propagations -------------------------------------------
  EdgeRouteTablePropagation1:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.HRVPC_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.edge_tgw_rtb_id
  EdgeRouteTablePropagation2:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.ENGVPC_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.edge_tgw_rtb_id
  HRVPCRouteTablePropagation1:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.vpn1_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.HRVPC_tgw_rtb_id
  HRVPCRouteTablePropagation2:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.vpn2_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.HRVPC_tgw_rtb_id
  ENGVPCRouteTablePropagation1:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.vpn1_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.ENGVPC_tgw_rtb_id
  ENGVPCRouteTablePropagation2:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    DependsOn: TransitGatewayProperties
    Properties:
      TransitGatewayAttachmentId: !GetAtt TransitGatewayProperties.vpn2_tgw_attachment_id
      TransitGatewayRouteTableId: !GetAtt TransitGatewayProperties.ENGVPC_tgw_rtb_id
Outputs:
  TransitGateway:
    Value: !Ref TransitGateway
    Export: 
      Name: !Sub ${AWS::StackName}-TransitGateway
  AmazonSideAsn:
    Description: "Amazon side ASN for the BGP session"
    Value: !Ref AmazonSideAsn
  vEdge1VPNTunnelInsideCIDRs:
    Description: "vEdge1 VPN  Tunnel CIDRs"
    Value: !Join
      - ','
      - !Ref vEdge1VPNTunnelCIDRs
    Export: 
      Name: !Sub ${AWS::StackName}-vEdge1VPNTunnelInsideCIDRs
  vEdge1VPNTunnelOutsideIPs:
    Description: "vEdge1 VPN Tunnel Outside IP"
    Value: !Join
      - ','
      - !GetAtt TransitGatewayProperties.vpn0OutsideIps
    Export: 
      Name: !Sub ${AWS::StackName}-vEdge1VPNTunnelOutsideIPs
  vEdge2VPNTunnelInsideCIDRs:
    Description: "vEdge2 VPN Tunnel CIDRs"
    Value: !Join
      - ','
      - !Ref vEdge2VPNTunnelCIDRs
    Export: 
      Name: !Sub ${AWS::StackName}-vEdge2VPNTunnelInsideCIDRs
  vEdge2VPNTunnelOutsideIPs:
    Description: "vEdge1 VPN Outside IP"
    Value: !Join
      - ','
      - !GetAtt TransitGatewayProperties.vpn1OutsideIps
    Export: 
      Name: !Sub ${AWS::StackName}-vEdge2VPNTunnelOutsideIPs
  vEdge1PreSharedKey:
    Description: "vEdge1 VPN IPsec PreSharedKey"
    Value: !Ref PreSharedKeyForvEdge1VPNAttachment
    Export: 
      Name: !Sub ${AWS::StackName}-vEdge1PreSharedKey
  vEdge2PreSharedKey:
    Description: "vEdge2 VPN IPsec PreSharedKey"
    Value: !Ref PreSharedKeyForvEdge2VPNAttachment
    Export: 
      Name: !Sub ${AWS::StackName}-vEdge2PreSharedKey